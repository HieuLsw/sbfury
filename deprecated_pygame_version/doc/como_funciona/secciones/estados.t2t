Estados de los personajes
Hugo Ruscitti
0.1


= Estados = 


== Resumen == 

Cada personaje puede realizar diferentes acciones: correr, saltar, caminar.
Cada una de estas acciones recibe el nombre de //estado//.

En este videojuego se necesita implementar una gran cantidad de estados por
personaje. Por lo tanto se ha optado implementar la gestión de estados
mediante el patrón de diseño "State Pattern". Este patrón consiste en
representar el comportamiento de cada estado mediante un objeto diferente, de
forma tal que la transición entre un estado y otro sea dinámica y sencilla.

Por ejemplo, el personaje principal del juego, **Player**, contiene una
variable llamada 'state' que indica el estado actual del personaje. Cuando
se tiene que altualizar el personaje, el mismo objeto se encarga de utilizar
el objeto indicado por la variable //state//.

```
#Personaje

def update(...):
    self.state.update()
```

De esta forma, cambiando el objeto referenciado por el atributo
//state//, el personaje se comportará de forma diferente.

== Objeto State ==

Un estado se debe construir a partir de la clase State:

```
#State

def __init__(self, player):
    ...

def update(self):
    ...
```

y debe re-definir el método //update//, desde donde tendrá acceso al personaje
del juego desde el atributo //player//.

 [ima/states.png] 


== Cambios de estado ==

Si se quiere implementar un cambio de estado en el personaje debe llamar
al método //change_state// de la clase //Player// y enviarle como parámetro 
una instancia del nuevo estado.

Por ejemplo, si queremos que el estado //Parado// le permita al usuario
transitar al estado //saltar// o //caminar// mediante las teclas //up//, 
//left// o //right//:

```
#Parado

def __init__(self, player):
    State.__init__(self, player)

def update(self):
    
    if self.player.control.up:
        self.player.change_state(Saltar(self.player))

    if self.player.control.left or self.player.control.right:
        self.player.change_state(Caminar(self.player))
```

recordar que cada instancia de estado necesita una referencia al personaje que
debe manipular. Esto posibilita que cada método `update` tenga la posibilidad
de ordenar cambios de estado y manipular cualquier otra cosa relacionada
con el personaje.
